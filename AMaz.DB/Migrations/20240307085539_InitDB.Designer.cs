// <auto-generated />
using System;
using AMaz.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AMaz.DB.Migrations
{
    [DbContext(typeof(AMazDbContext))]
    [Migration("20240307085539_InitDB")]
    partial class InitDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AMaz.Entity.AcademicYear", b =>
                {
                    b.Property<Guid>("AcademicYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeTo")
                        .HasColumnType("datetime2");

                    b.HasKey("AcademicYearId");

                    b.ToTable("AcademicYear");
                });

            modelBuilder.Entity("AMaz.Entity.Contribution", b =>
                {
                    b.Property<Guid>("ContributionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AcceptedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileLinks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAcceptedTerms")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeenByOrdinator")
                        .HasColumnType("bit");

                    b.Property<Guid>("MagazineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TermAndConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContributionId");

                    b.HasIndex("MagazineId");

                    b.HasIndex("TermAndConditionId");

                    b.HasIndex("Title");

                    b.HasIndex("UserId");

                    b.ToTable("Contribution");
                });

            modelBuilder.Entity("AMaz.Entity.Faculty", b =>
                {
                    b.Property<Guid>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("FacultyId");

                    b.HasIndex("Name");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("AMaz.Entity.Magazine", b =>
                {
                    b.Property<Guid>("MagazineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AcademicYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FinalClosureDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FirstClosureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MagazineId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("Name");

                    b.ToTable("Magazine");
                });

            modelBuilder.Entity("AMaz.Entity.TermAndCondition", b =>
                {
                    b.Property<Guid>("TermAndConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Version")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TermAndConditionId");

                    b.ToTable("TermAndCondition");
                });

            modelBuilder.Entity("AMaz.Entity.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastDeactivatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("Email");

                    b.HasIndex("FacultyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AMaz.Entity.Contribution", b =>
                {
                    b.HasOne("AMaz.Entity.Magazine", "Magazine")
                        .WithMany("Contributions")
                        .HasForeignKey("MagazineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMaz.Entity.TermAndCondition", "TermAndCondition")
                        .WithMany("Contributions")
                        .HasForeignKey("TermAndConditionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AMaz.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Magazine");

                    b.Navigation("TermAndCondition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AMaz.Entity.Magazine", b =>
                {
                    b.HasOne("AMaz.Entity.AcademicYear", "AcademicYear")
                        .WithMany("Magazines")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AMaz.Entity.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.Navigation("AcademicYear");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("AMaz.Entity.User", b =>
                {
                    b.HasOne("AMaz.Entity.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("AMaz.Entity.AcademicYear", b =>
                {
                    b.Navigation("Magazines");
                });

            modelBuilder.Entity("AMaz.Entity.Magazine", b =>
                {
                    b.Navigation("Contributions");
                });

            modelBuilder.Entity("AMaz.Entity.TermAndCondition", b =>
                {
                    b.Navigation("Contributions");
                });
#pragma warning restore 612, 618
        }
    }
}
